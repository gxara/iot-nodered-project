[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "116607840886ece1",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e237f4a1.bd2cd",
        "type": "tab",
        "label": "Sheet 1"
    },
    {
        "id": "6de0314419086f46",
        "type": "tab",
        "label": "Sheet 1"
    },
    {
        "id": "224e8e6af9e96c1a",
        "type": "coap-server",
        "name": "Gateway",
        "port": "5683",
        "ipv6": false
    },
    {
        "id": "6e81bde6a145e3c9",
        "type": "coap-server",
        "name": "Hello CoAP Server",
        "port": "5683"
    },
    {
        "id": "381a0a1f9b485252",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Trigger Temperature Sensors",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "4",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "714e1cebfb610978",
                "d4880cbeabf558bb",
                "5d9fd71810737054",
                "ec115b4e8d7816f4"
            ]
        ]
    },
    {
        "id": "714e1cebfb610978",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Temperature Sensor 1",
        "minimum": "20",
        "maximum": "30",
        "roundTo": "0",
        "Floor": true,
        "x": 780,
        "y": 580,
        "wires": [
            [
                "041fde66e03ee140"
            ]
        ]
    },
    {
        "id": "d4880cbeabf558bb",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Temperature Sensor 2",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 640,
        "wires": [
            [
                "041fde66e03ee140"
            ]
        ]
    },
    {
        "id": "5d9fd71810737054",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Temperature Sensor 3",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 700,
        "wires": [
            [
                "041fde66e03ee140"
            ]
        ]
    },
    {
        "id": "ec115b4e8d7816f4",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Temperature Sensor 4",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 760,
        "wires": [
            [
                "041fde66e03ee140"
            ]
        ]
    },
    {
        "id": "b283348e1ddf7af1",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Trigger Illumination Sensors",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 980,
        "wires": [
            [
                "c914d2a0afdf89ba",
                "70c880aee2402bf8",
                "1af3b92159e37c8d",
                "7036571f125f780a"
            ]
        ]
    },
    {
        "id": "c914d2a0afdf89ba",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Illumination Sensor 1",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 880,
        "wires": [
            [
                "901c75ae80397ecb"
            ]
        ]
    },
    {
        "id": "70c880aee2402bf8",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Illumination Sensor 2",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 940,
        "wires": [
            [
                "901c75ae80397ecb"
            ]
        ]
    },
    {
        "id": "1af3b92159e37c8d",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Illumination Sensor 3",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 1000,
        "wires": [
            [
                "901c75ae80397ecb"
            ]
        ]
    },
    {
        "id": "7036571f125f780a",
        "type": "Number",
        "z": "f6f2187d.f17ca8",
        "name": "Illumination Sensor 4",
        "minimum": "20",
        "maximum": "32",
        "roundTo": "2",
        "Floor": false,
        "x": 780,
        "y": 1060,
        "wires": [
            [
                "901c75ae80397ecb"
            ]
        ]
    },
    {
        "id": "041fde66e03ee140",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/temperature",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send temperature [COAP]",
        "x": 1170,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c0c8d9bd0f563e52",
        "type": "coap in",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "name": "",
        "server": "6e81bde6a145e3c9",
        "url": "/temperature",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "067b399ec8babbcf"
            ]
        ]
    },
    {
        "id": "067b399ec8babbcf",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nreturn {\"x\": \"Received temperature update\", \"value\": msg.req.payload.toString(), \"origin\": msg.req};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "3a895c8ff4f0c558"
            ]
        ]
    },
    {
        "id": "3a895c8ff4f0c558",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 40,
        "wires": []
    },
    {
        "id": "b75692594eb4a9bf",
        "type": "coap in",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "name": "",
        "server": "6e81bde6a145e3c9",
        "url": "/illumination",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "fa03c24629492ee5"
            ]
        ]
    },
    {
        "id": "fa03c24629492ee5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nreturn {\"x\": \"Received illumination update\", \"value\": msg.req.payload.toString(), \"origin\": msg.req};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 160,
        "wires": [
            [
                "dc54c58f9464bd0d"
            ]
        ]
    },
    {
        "id": "dc54c58f9464bd0d",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "901c75ae80397ecb",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/illumination",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send illumination [COAP]",
        "x": 1170,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "173982a0b32ab193",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Collecting stadium information",
        "info": "# Teste",
        "x": 400,
        "y": 440,
        "wires": []
    },
    {
        "id": "757bbb856408b9c7",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "COAP server",
        "info": "# Teste",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "79e2f3d1281f469a",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Collecting players information",
        "info": "# Teste",
        "x": 380,
        "y": 1220,
        "wires": []
    },
    {
        "id": "201004282ad78fbe",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 1 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1320,
        "wires": [
            [
                "e9cd2637a811cc38"
            ]
        ]
    },
    {
        "id": "8658fda9c8c16264",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Distribute RFID tags accross different players",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1620,
        "wires": [
            [
                "201004282ad78fbe",
                "596201d54d4fd659",
                "f0d2513b1397319d",
                "e5b84198fc5f4548",
                "f6a5f683313d01e7",
                "c543d84ff8b86a7a",
                "9cbb60efe8024cc8",
                "a8a6d6eeede79eb8",
                "1bac0a7fcae8e1be",
                "d1d1717f424b8016",
                "7d416dd7a648fcb5"
            ]
        ]
    },
    {
        "id": "cd3b10e49ed6a452",
        "type": "coap in",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "name": "",
        "server": "6e81bde6a145e3c9",
        "url": "/player-data",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "c746672854055a94"
            ]
        ]
    },
    {
        "id": "c746672854055a94",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "const messageContent = JSON.parse(msg.req.payload)\n// return {\n//     \"payload\": {\n//         \"x\": `Received player ${messageContent.playerId} data`,\n//         \"data\":messageContent,\n//         \"origin\": msg.req\n//     }\n// };\n\nreturn {payload: messageContent}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "b3688121c9ebc473",
                "55f7c9a3426a5f7e"
            ]
        ]
    },
    {
        "id": "b3688121c9ebc473",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "e9cd2637a811cc38",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1320,
        "wires": [
            [
                "5692977bdfafbeb6"
            ]
        ]
    },
    {
        "id": "5692977bdfafbeb6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1320,
        "wires": [
            [
                "5204235d2abe79e7"
            ]
        ]
    },
    {
        "id": "5204235d2abe79e7",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "596201d54d4fd659",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 2 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1380,
        "wires": [
            [
                "d9e7704340d8fcc6"
            ]
        ]
    },
    {
        "id": "d9e7704340d8fcc6",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1380,
        "wires": [
            [
                "b977ef7830ebfa18"
            ]
        ]
    },
    {
        "id": "b977ef7830ebfa18",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1380,
        "wires": [
            [
                "87fec3133235ae63"
            ]
        ]
    },
    {
        "id": "f0d2513b1397319d",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 3 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1440,
        "wires": [
            [
                "9e4206fae4ed82f9"
            ]
        ]
    },
    {
        "id": "9e4206fae4ed82f9",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1440,
        "wires": [
            [
                "4077fa63a8d66280"
            ]
        ]
    },
    {
        "id": "4077fa63a8d66280",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1440,
        "wires": [
            [
                "079fd979c2561f7c"
            ]
        ]
    },
    {
        "id": "e5b84198fc5f4548",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 4 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1500,
        "wires": [
            [
                "b3c5cc611262ab92"
            ]
        ]
    },
    {
        "id": "b3c5cc611262ab92",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1500,
        "wires": [
            [
                "8f7d8136b75e6637"
            ]
        ]
    },
    {
        "id": "8f7d8136b75e6637",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1500,
        "wires": [
            [
                "4c7071aa5c2e4d52"
            ]
        ]
    },
    {
        "id": "f6a5f683313d01e7",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 5 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1560,
        "wires": [
            [
                "3320f511519cdf15"
            ]
        ]
    },
    {
        "id": "3320f511519cdf15",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1560,
        "wires": [
            [
                "d0f2d85472577e56"
            ]
        ]
    },
    {
        "id": "d0f2d85472577e56",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1560,
        "wires": [
            [
                "6e6b50364665303e"
            ]
        ]
    },
    {
        "id": "c543d84ff8b86a7a",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 6 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1620,
        "wires": [
            [
                "95d8b160fb1de8aa"
            ]
        ]
    },
    {
        "id": "95d8b160fb1de8aa",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1620,
        "wires": [
            [
                "eb721e75b4c2ecf9"
            ]
        ]
    },
    {
        "id": "eb721e75b4c2ecf9",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1620,
        "wires": [
            [
                "a58289f6b04030f3"
            ]
        ]
    },
    {
        "id": "9cbb60efe8024cc8",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 7 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1680,
        "wires": [
            [
                "9d0ce54bd614ed5d"
            ]
        ]
    },
    {
        "id": "9d0ce54bd614ed5d",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1680,
        "wires": [
            [
                "ad39f0e4dd39dacf"
            ]
        ]
    },
    {
        "id": "ad39f0e4dd39dacf",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1680,
        "wires": [
            [
                "ac73256019acd5ad"
            ]
        ]
    },
    {
        "id": "a8a6d6eeede79eb8",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 8 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1740,
        "wires": [
            [
                "0e651efa4bca5742"
            ]
        ]
    },
    {
        "id": "0e651efa4bca5742",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1740,
        "wires": [
            [
                "dd36ad5d3c283f10"
            ]
        ]
    },
    {
        "id": "dd36ad5d3c283f10",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1740,
        "wires": [
            [
                "a937e5c11a75a224"
            ]
        ]
    },
    {
        "id": "1bac0a7fcae8e1be",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 9 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1800,
        "wires": [
            [
                "b716dc34dee1e69a"
            ]
        ]
    },
    {
        "id": "b716dc34dee1e69a",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1800,
        "wires": [
            [
                "7e556773d1cb23d5"
            ]
        ]
    },
    {
        "id": "7e556773d1cb23d5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1800,
        "wires": [
            [
                "daaca08803a776d3"
            ]
        ]
    },
    {
        "id": "d1d1717f424b8016",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 10 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1860,
        "wires": [
            [
                "fd9bdc97519f27e9"
            ]
        ]
    },
    {
        "id": "fd9bdc97519f27e9",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1860,
        "wires": [
            [
                "63d7a91ef4169847"
            ]
        ]
    },
    {
        "id": "63d7a91ef4169847",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1860,
        "wires": [
            [
                "d94a02fbba857f61"
            ]
        ]
    },
    {
        "id": "7d416dd7a648fcb5",
        "type": "UUID",
        "z": "f6f2187d.f17ca8",
        "name": "Player 11 UUID ",
        "format": "Hex",
        "x": 880,
        "y": 1920,
        "wires": [
            [
                "79f3f62260916c0b"
            ]
        ]
    },
    {
        "id": "79f3f62260916c0b",
        "type": "trigger",
        "z": "f6f2187d.f17ca8",
        "name": "Periodically measure physiological parameters",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "-7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1220,
        "y": 1920,
        "wires": [
            [
                "8708c551f8d7e21b"
            ]
        ]
    },
    {
        "id": "8708c551f8d7e21b",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Measure physiological parameters",
        "func": "const playerId = msg.payload;\n\nconst collectedData = {\n    \"temperature\": Math.random() * 10,\n    \"sweat_rate\": Math.random() * 10,\n    \"heart_rate\": Math.random() * 10,\n    \"body_motion\": Math.random() * 10,\n    \"respiration_rate\": Math.random() * 10\n}\n\nreturn {\n    \"payload\": {...collectedData, \"playerId\": playerId}\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1920,
        "wires": [
            [
                "2a2f798cba5c4891"
            ]
        ]
    },
    {
        "id": "87fec3133235ae63",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "079fd979c2561f7c",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "4c7071aa5c2e4d52",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "6e6b50364665303e",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "a58289f6b04030f3",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "ac73256019acd5ad",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "a937e5c11a75a224",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "daaca08803a776d3",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "d94a02fbba857f61",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "2a2f798cba5c4891",
        "type": "coap request",
        "z": "f6f2187d.f17ca8",
        "method": "POST",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "coap://localhost/player-data",
        "content-format": "application/json",
        "raw-buffer": false,
        "name": "Send player physiological data [COAP]",
        "x": 2110,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "f2c43cde461e42b1",
        "type": "file",
        "z": "f6f2187d.f17ca8",
        "name": "Generate Report",
        "filename": "collected_data__soccer_match.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1910,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "55f7c9a3426a5f7e",
        "type": "csv",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1590,
        "y": 240,
        "wires": [
            [
                "f2c43cde461e42b1"
            ]
        ]
    }
]